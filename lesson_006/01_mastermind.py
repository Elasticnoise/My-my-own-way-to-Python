# -*- coding: utf-8 -*-
import mastermind_engine as engine

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT


def check_validation(input_number, _secret_number):
    global attempt
    attempt = 1
    while _secret_number != list(input_number):
        attempt += 1
        if input_number[0] == '0':
            print('Первая цифра не должна быть нулем. Пожалуйста повторите ввод!')
            input_number = list(input('Введите корректное число:'))
        elif len(set(_secret_number)) > len(set(input_number)):
            print('Полученное число меньше 4 цифр, либо есть повторяющиеся числа!')
            input_number = list(input('Введите корректное число:'))
        elif len(_secret_number) < len(set(input_number)):
            print('Полученное число больше 4 цифр')
            input_number = list(input('Введите корректное число:'))
        else:
            check_number = engine.check_number(input_number=input_number)
            print('Колличество быков:', check_number['bulls'], 'Колличество коров:', check_number['cows'])
            input_number = list(input('Введите ваше число:'))
            print(input_number[0])


def request():
    while True:
        question = str(input('Хотите еще партию?(да/нет)'))
        if question == 'да':
            return question
        if question == 'нет':
            return question


def game():
    _secret_number = engine.make_number()
    print(_secret_number)
    input_number = list(input('Введите ваше число:'))
    check_validation(input_number=input_number, _secret_number=_secret_number)
    print('Вы отгадали! Поздравляю!')
    print('Колличество попыток:', attempt)


while True:
    game()
    if request() == 'нет':
        break

# зачет!
